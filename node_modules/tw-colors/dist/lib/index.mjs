// lib/index.ts
import Color from "color";
import plugin from "tailwindcss/plugin";
import forEach from "lodash.foreach";
import flatten from "flat";
var SCHEME = Symbol("color-scheme");
var resolveTwcConfig = (config = {}, {
  getCssVariable = defaultGetCssVariable,
  getThemeClassName = defaultGetThemeClassName,
  defaultTheme
} = {}) => {
  const resolved = {
    variants: [],
    utilities: {},
    colors: {}
  };
  const configObject = typeof config === "function" ? config({ dark, light }) : config;
  forEach(configObject, (colors, themeName) => {
    const themeClassName = getThemeClassName(themeName);
    const cssSelector = themeName === defaultTheme ? `.${themeClassName},[data-theme="${themeName}"],:root` : `.${themeClassName},[data-theme="${themeName}"]`;
    const flatColors = flattenColors(colors);
    resolved.variants.push({
      name: `${themeClassName}`,
      definition: [`&.${themeClassName}`, `&[data-theme='${themeName}']`]
    });
    resolved.utilities[cssSelector] = colors[SCHEME] ? { "color-scheme": colors[SCHEME] } : {};
    forEach(flatColors, (colorValue, colorName) => {
      if (colorName === SCHEME)
        return;
      const safeColorName = escapeChars(colorName, "/");
      const [h, s, l, defaultAlphaValue] = toHslaArray(colorValue);
      const twcColorVariable = getCssVariable(safeColorName);
      const twcOpacityVariable = `${getCssVariable(safeColorName)}-opacity`;
      resolved.utilities[cssSelector][twcColorVariable] = `${h} ${s}% ${l}%`;
      if (typeof defaultAlphaValue === "number") {
        resolved.utilities[cssSelector][twcOpacityVariable] = defaultAlphaValue.toFixed(2);
      }
      resolved.colors[colorName] = ({ opacityVariable, opacityValue }) => {
        if (!isNaN(+opacityValue)) {
          return `hsl(var(${twcColorVariable}) / ${opacityValue})`;
        }
        if (opacityVariable) {
          return `hsl(var(${twcColorVariable}) / var(${twcOpacityVariable}, var(${opacityVariable})))`;
        }
        return `hsl(var(${twcColorVariable}) / var(${twcOpacityVariable}, 1))`;
      };
    });
  });
  return resolved;
};
var createThemes = (config = {}, options = {}) => {
  const resolved = resolveTwcConfig(config, options);
  return plugin(
    ({ addUtilities, addVariant }) => {
      addUtilities(resolved.utilities);
      resolved.variants.forEach(({ name, definition }) => addVariant(name, definition));
    },
    // extend the colors config
    {
      theme: {
        extend: {
          // @ts-ignore
          colors: resolved.colors
        }
      }
    }
  );
};
function escapeChars(str, ...chars) {
  let result = str;
  for (let char of chars) {
    const regexp = new RegExp(char, "g");
    result = str.replace(regexp, "\\" + char);
  }
  return result;
}
function flattenColors(colors) {
  const flatColorsWithDEFAULT = flatten(colors, {
    safe: true,
    delimiter: "-"
  });
  return Object.entries(flatColorsWithDEFAULT).reduce((acc, [key, value]) => {
    acc[key.replace(/\-DEFAULT$/, "")] = value;
    return acc;
  }, {});
}
function toHslaArray(colorValue) {
  return Color(colorValue).hsl().round(1).array();
}
function defaultGetCssVariable(themeName) {
  return `--twc-${themeName}`;
}
function defaultGetThemeClassName(themeName) {
  return `theme-${themeName}`;
}
function dark(colors) {
  return {
    ...colors,
    [SCHEME]: "dark"
  };
}
function light(colors) {
  return {
    ...colors,
    [SCHEME]: "light"
  };
}
export {
  createThemes,
  resolveTwcConfig
};
//# sourceMappingURL=index.mjs.map